// Code generated by the Encore 1.50.6 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly aiAnalysis: aiAnalysis.ServiceClient
    public readonly lessonsLearnt: lessonsLearnt.ServiceClient
    public readonly nodes: nodes.ServiceClient
    public readonly product: product.ServiceClient
    public readonly product_types: product_types.ServiceClient
    public readonly production_errors: production_errors.ServiceClient
    public readonly project: project.ServiceClient
    public readonly techReview: techReview.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.aiAnalysis = new aiAnalysis.ServiceClient(base)
        this.lessonsLearnt = new lessonsLearnt.ServiceClient(base)
        this.nodes = new nodes.ServiceClient(base)
        this.product = new product.ServiceClient(base)
        this.product_types = new product_types.ServiceClient(base)
        this.production_errors = new production_errors.ServiceClient(base)
        this.project = new project.ServiceClient(base)
        this.techReview = new techReview.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { analyze as api_aiAnalysis_analyze_analyze } from "~backend/ai-analysis/analyze";

export namespace aiAnalysis {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.analyze = this.analyze.bind(this)
        }

        /**
         * Analyzes an error and generates AI-powered improvement suggestions
         */
        public async analyze(params: RequestType<typeof api_aiAnalysis_analyze_analyze>): Promise<ResponseType<typeof api_aiAnalysis_analyze_analyze>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai-analysis/analyze`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_aiAnalysis_analyze_analyze>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_lessonsLearnt_create_create } from "~backend/lessons-learnt/create";
import { incrementOccurrence as api_lessonsLearnt_increment_occurrence_incrementOccurrence } from "~backend/lessons-learnt/increment-occurrence";
import { list as api_lessonsLearnt_list_list } from "~backend/lessons-learnt/list";
import { listByType as api_lessonsLearnt_list_by_type_listByType } from "~backend/lessons-learnt/list-by-type";
import { searchSimilar as api_lessonsLearnt_search_similar_searchSimilar } from "~backend/lessons-learnt/search-similar";

export namespace lessonsLearnt {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.incrementOccurrence = this.incrementOccurrence.bind(this)
            this.list = this.list.bind(this)
            this.listByType = this.listByType.bind(this)
            this.searchSimilar = this.searchSimilar.bind(this)
        }

        /**
         * Creates a new lesson learnt entry
         */
        public async create(params: RequestType<typeof api_lessonsLearnt_create_create>): Promise<ResponseType<typeof api_lessonsLearnt_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lessons-learnt`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lessonsLearnt_create_create>
        }

        /**
         * Increments the occurrence count of a lesson learnt
         */
        public async incrementOccurrence(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/lessons-learnt/${encodeURIComponent(params.id)}/increment`, {method: "POST", body: undefined})
        }

        public async list(): Promise<ResponseType<typeof api_lessonsLearnt_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lessons-learnt`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lessonsLearnt_list_list>
        }

        /**
         * Retrieves lessons learnt for a specific product type, ordered by occurrence count
         */
        public async listByType(params: { productType: string }): Promise<ResponseType<typeof api_lessonsLearnt_list_by_type_listByType>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lessons-learnt/by-type/${encodeURIComponent(params.productType)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lessonsLearnt_list_by_type_listByType>
        }

        public async searchSimilar(params: RequestType<typeof api_lessonsLearnt_search_similar_searchSimilar>): Promise<ResponseType<typeof api_lessonsLearnt_search_similar_searchSimilar>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lessons-learnt/search-similar`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lessonsLearnt_search_similar_searchSimilar>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_nodes_create_create } from "~backend/nodes/create";
import { deleteNode as api_nodes_delete_deleteNode } from "~backend/nodes/delete";
import { getPdfUrl as api_nodes_get_pdf_url_getPdfUrl } from "~backend/nodes/get-pdf-url";
import { listAll as api_nodes_list_all_listAll } from "~backend/nodes/list-all";
import { listBrands as api_nodes_list_brands_listBrands } from "~backend/nodes/list-brands";
import { listByBrand as api_nodes_list_by_brand_listByBrand } from "~backend/nodes/list-by-brand";
import { listByPartName as api_nodes_list_by_part_name_listByPartName } from "~backend/nodes/list-by-part-name";
import { listByProduct as api_nodes_list_by_product_listByProduct } from "~backend/nodes/list-by-product";
import { listPartNames as api_nodes_list_part_names_listPartNames } from "~backend/nodes/list-part-names";
import { listParts as api_nodes_list_parts_listParts } from "~backend/nodes/list-parts";
import { listProducts as api_nodes_list_products_listProducts } from "~backend/nodes/list-products";
import { recommend as api_nodes_recommend_recommend } from "~backend/nodes/recommend";
import { update as api_nodes_update_update } from "~backend/nodes/update";

export namespace nodes {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteNode = this.deleteNode.bind(this)
            this.getPdfUrl = this.getPdfUrl.bind(this)
            this.listAll = this.listAll.bind(this)
            this.listBrands = this.listBrands.bind(this)
            this.listByBrand = this.listByBrand.bind(this)
            this.listByPartName = this.listByPartName.bind(this)
            this.listByProduct = this.listByProduct.bind(this)
            this.listPartNames = this.listPartNames.bind(this)
            this.listParts = this.listParts.bind(this)
            this.listProducts = this.listProducts.bind(this)
            this.recommend = this.recommend.bind(this)
            this.update = this.update.bind(this)
        }

        public async create(params: RequestType<typeof api_nodes_create_create>): Promise<ResponseType<typeof api_nodes_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_create_create>
        }

        public async deleteNode(params: { id: string }): Promise<ResponseType<typeof api_nodes_delete_deleteNode>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_delete_deleteNode>
        }

        public async getPdfUrl(params: RequestType<typeof api_nodes_get_pdf_url_getPdfUrl>): Promise<ResponseType<typeof api_nodes_get_pdf_url_getPdfUrl>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                pdfPath: params.pdfPath,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/pdf-url`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_get_pdf_url_getPdfUrl>
        }

        public async listAll(): Promise<ResponseType<typeof api_nodes_list_all_listAll>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/all`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_list_all_listAll>
        }

        public async listBrands(): Promise<ResponseType<typeof api_nodes_list_brands_listBrands>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/brands`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_list_brands_listBrands>
        }

        public async listByBrand(params: RequestType<typeof api_nodes_list_by_brand_listByBrand>): Promise<ResponseType<typeof api_nodes_list_by_brand_listByBrand>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                brandName: params.brandName,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/by-brand`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_list_by_brand_listByBrand>
        }

        public async listByPartName(params: { partName: string }): Promise<ResponseType<typeof api_nodes_list_by_part_name_listByPartName>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/by-part/${encodeURIComponent(params.partName)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_list_by_part_name_listByPartName>
        }

        public async listByProduct(params: RequestType<typeof api_nodes_list_by_product_listByProduct>): Promise<ResponseType<typeof api_nodes_list_by_product_listByProduct>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                productCode: params.productCode,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/by-product`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_list_by_product_listByProduct>
        }

        public async listPartNames(): Promise<ResponseType<typeof api_nodes_list_part_names_listPartNames>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/part-names`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_list_part_names_listPartNames>
        }

        public async listParts(): Promise<ResponseType<typeof api_nodes_list_parts_listParts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/parts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_list_parts_listParts>
        }

        public async listProducts(): Promise<ResponseType<typeof api_nodes_list_products_listProducts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/products`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_list_products_listProducts>
        }

        /**
         * Recommends relevant nodes based on product type, similar projects, and AI analysis
         */
        public async recommend(params: RequestType<typeof api_nodes_recommend_recommend>): Promise<ResponseType<typeof api_nodes_recommend_recommend>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/recommend`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_recommend_recommend>
        }

        public async update(params: RequestType<typeof api_nodes_update_update>): Promise<ResponseType<typeof api_nodes_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                brandName:   params.brandName,
                description: params.description,
                partName:    params.partName,
                productCode: params.productCode,
                productType: params.productType,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/nodes/${encodeURIComponent(params.id)}`, {method: "PATCH", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_nodes_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_product_create_create } from "~backend/product/create";
import { deleteProduct as api_product_delete_deleteProduct } from "~backend/product/delete";
import { get as api_product_get_get } from "~backend/product/get";
import { listByProject as api_product_list_by_project_listByProject } from "~backend/product/list-by-project";
import { update as api_product_update_update } from "~backend/product/update";

export namespace product {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteProduct = this.deleteProduct.bind(this)
            this.get = this.get.bind(this)
            this.listByProject = this.listByProject.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new product and automatically generates a tech review card
         */
        public async create(params: RequestType<typeof api_product_create_create>): Promise<ResponseType<typeof api_product_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/products`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_create_create>
        }

        public async deleteProduct(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/product/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves a product by ID
         */
        public async get(params: { id: string }): Promise<ResponseType<typeof api_product_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/products/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_get_get>
        }

        /**
         * Retrieves all products for a project
         */
        public async listByProject(params: { projectId: string }): Promise<ResponseType<typeof api_product_list_by_project_listByProject>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/products/by-project/${encodeURIComponent(params.projectId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_list_by_project_listByProject>
        }

        public async update(params: RequestType<typeof api_product_update_update>): Promise<void> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                dimensions:       params.dimensions,
                drawingReference: params.drawingReference,
                name:             params.name,
                type:             params.type,
            }

            await this.baseClient.callTypedAPI(`/product/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_product_types_create_create } from "~backend/product-types/create";
import { createPart as api_product_types_create_part_createPart } from "~backend/product-types/create-part";
import { deleteProductType as api_product_types_delete_deleteProductType } from "~backend/product-types/delete";
import { deletePart as api_product_types_delete_part_deletePart } from "~backend/product-types/delete-part";
import { list as api_product_types_list_list } from "~backend/product-types/list";
import { listParts as api_product_types_list_parts_listParts } from "~backend/product-types/list-parts";
import { update as api_product_types_update_update } from "~backend/product-types/update";
import { updatePart as api_product_types_update_part_updatePart } from "~backend/product-types/update-part";

export namespace product_types {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.createPart = this.createPart.bind(this)
            this.deletePart = this.deletePart.bind(this)
            this.deleteProductType = this.deleteProductType.bind(this)
            this.list = this.list.bind(this)
            this.listParts = this.listParts.bind(this)
            this.update = this.update.bind(this)
            this.updatePart = this.updatePart.bind(this)
        }

        public async create(params: RequestType<typeof api_product_types_create_create>): Promise<ResponseType<typeof api_product_types_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/product-types`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_types_create_create>
        }

        public async createPart(params: RequestType<typeof api_product_types_create_part_createPart>): Promise<ResponseType<typeof api_product_types_create_part_createPart>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/product-types/parts`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_types_create_part_createPart>
        }

        public async deletePart(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/product-types/parts/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        public async deleteProductType(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/product-types/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        public async list(): Promise<ResponseType<typeof api_product_types_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/product-types`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_types_list_list>
        }

        public async listParts(params: { productTypeId: string }): Promise<ResponseType<typeof api_product_types_list_parts_listParts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/product-types/${encodeURIComponent(params.productTypeId)}/parts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_types_list_parts_listParts>
        }

        public async update(params: RequestType<typeof api_product_types_update_update>): Promise<ResponseType<typeof api_product_types_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                name: params.name,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/product-types/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_types_update_update>
        }

        public async updatePart(params: RequestType<typeof api_product_types_update_part_updatePart>): Promise<ResponseType<typeof api_product_types_update_part_updatePart>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                name:      params.name,
                sortOrder: params.sortOrder,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/product-types/parts/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_types_update_part_updatePart>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { bulkCreate as api_production_errors_bulk_create_bulkCreate } from "~backend/production-errors/bulk-create";
import { create as api_production_errors_create_create } from "~backend/production-errors/create";
import { deleteErrors as api_production_errors_delete_deleteErrors } from "~backend/production-errors/delete";
import { list as api_production_errors_list_list } from "~backend/production-errors/list";
import { listByProduct as api_production_errors_list_by_product_listByProduct } from "~backend/production-errors/list-by-product";
import { update as api_production_errors_update_update } from "~backend/production-errors/update";

export namespace production_errors {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.bulkCreate = this.bulkCreate.bind(this)
            this.create = this.create.bind(this)
            this.deleteErrors = this.deleteErrors.bind(this)
            this.list = this.list.bind(this)
            this.listByProduct = this.listByProduct.bind(this)
            this.update = this.update.bind(this)
        }

        public async bulkCreate(params: RequestType<typeof api_production_errors_bulk_create_bulkCreate>): Promise<ResponseType<typeof api_production_errors_bulk_create_bulkCreate>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/production-errors/bulk`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_production_errors_bulk_create_bulkCreate>
        }

        public async create(params: RequestType<typeof api_production_errors_create_create>): Promise<ResponseType<typeof api_production_errors_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/production-errors`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_production_errors_create_create>
        }

        public async deleteErrors(params: RequestType<typeof api_production_errors_delete_deleteErrors>): Promise<ResponseType<typeof api_production_errors_delete_deleteErrors>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                ids: params.ids.map((v) => String(v)),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/production-errors`, {query, method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_production_errors_delete_deleteErrors>
        }

        public async list(): Promise<ResponseType<typeof api_production_errors_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/production-errors`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_production_errors_list_list>
        }

        public async listByProduct(params: RequestType<typeof api_production_errors_list_by_product_listByProduct>): Promise<ResponseType<typeof api_production_errors_list_by_product_listByProduct>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                productCode: params.productCode,
                projectCode: params.projectCode,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/production-errors/by-product`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_production_errors_list_by_product_listByProduct>
        }

        public async update(params: RequestType<typeof api_production_errors_update_update>): Promise<ResponseType<typeof api_production_errors_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                errorDescription: params.errorDescription,
                isResolved:       params.isResolved,
                partName:         params.partName,
                productCode:      params.productCode,
                projectCode:      params.projectCode,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/production-errors/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_production_errors_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_project_create_create } from "~backend/project/create";
import { deleteProject as api_project_delete_deleteProject } from "~backend/project/delete";
import { get as api_project_get_get } from "~backend/project/get";
import { list as api_project_list_list } from "~backend/project/list";
import { update as api_project_update_update } from "~backend/project/update";

export namespace project {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteProject = this.deleteProject.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new project
         */
        public async create(params: RequestType<typeof api_project_create_create>): Promise<ResponseType<typeof api_project_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_project_create_create>
        }

        public async deleteProject(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves a project by ID
         */
        public async get(params: { id: string }): Promise<ResponseType<typeof api_project_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_project_get_get>
        }

        /**
         * Retrieves all projects, ordered by creation date (latest first)
         */
        public async list(): Promise<ResponseType<typeof api_project_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_project_list_list>
        }

        public async update(params: RequestType<typeof api_project_update_update>): Promise<ResponseType<typeof api_project_update_update>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                client:      params.client,
                name:        params.name,
                projectType: params.projectType,
                status:      params.status,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_project_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { addError as api_techReview_add_error_addError } from "~backend/tech-review/add-error";
import { addPhotos as api_techReview_add_photos_addPhotos } from "~backend/tech-review/add-photos";
import { create as api_techReview_create_create } from "~backend/tech-review/create";
import { deleteComponentPartPhoto as api_techReview_delete_component_part_photo_deleteComponentPartPhoto } from "~backend/tech-review/delete-component-part-photo";
import { deletePhoto as api_techReview_delete_photo_deletePhoto } from "~backend/tech-review/delete-photo";
import { get as api_techReview_get_get } from "~backend/tech-review/get";
import { importExcel as api_techReview_import_excel_importExcel } from "~backend/tech-review/import-excel";
import { listComponentParts as api_techReview_list_component_parts_listComponentParts } from "~backend/tech-review/list-component-parts";
import { updateComponent as api_techReview_update_component_updateComponent } from "~backend/tech-review/update-component";
import { updateComponentPart as api_techReview_update_component_part_updateComponentPart } from "~backend/tech-review/update-component-part";
import { uploadComponentPartPhoto as api_techReview_upload_component_part_photo_uploadComponentPartPhoto } from "~backend/tech-review/upload-component-part-photo";
import { uploadPhoto as api_techReview_upload_photo_uploadPhoto } from "~backend/tech-review/upload-photo";

export namespace techReview {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.addError = this.addError.bind(this)
            this.addPhotos = this.addPhotos.bind(this)
            this.create = this.create.bind(this)
            this.deleteComponentPartPhoto = this.deleteComponentPartPhoto.bind(this)
            this.deletePhoto = this.deletePhoto.bind(this)
            this.get = this.get.bind(this)
            this.importExcel = this.importExcel.bind(this)
            this.listComponentParts = this.listComponentParts.bind(this)
            this.updateComponent = this.updateComponent.bind(this)
            this.updateComponentPart = this.updateComponentPart.bind(this)
            this.uploadComponentPartPhoto = this.uploadComponentPartPhoto.bind(this)
            this.uploadPhoto = this.uploadPhoto.bind(this)
        }

        /**
         * Adds a new error or issue to a tech review
         */
        public async addError(params: RequestType<typeof api_techReview_add_error_addError>): Promise<ResponseType<typeof api_techReview_add_error_addError>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tech-reviews/errors`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_techReview_add_error_addError>
        }

        public async addPhotos(params: RequestType<typeof api_techReview_add_photos_addPhotos>): Promise<ResponseType<typeof api_techReview_add_photos_addPhotos>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                photoUrls: params.photoUrls,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tech-reviews/components/${encodeURIComponent(params.componentId)}/photos`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_techReview_add_photos_addPhotos>
        }

        public async create(params: RequestType<typeof api_techReview_create_create>): Promise<ResponseType<typeof api_techReview_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tech-reviews`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_techReview_create_create>
        }

        public async deleteComponentPartPhoto(params: RequestType<typeof api_techReview_delete_component_part_photo_deleteComponentPartPhoto>): Promise<void> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                photoUrl: params.photoUrl,
            })

            await this.baseClient.callTypedAPI(`/tech-reviews/component-parts/${encodeURIComponent(params.partId)}/photo`, {query, method: "DELETE", body: undefined})
        }

        public async deletePhoto(params: { photoId: number }): Promise<ResponseType<typeof api_techReview_delete_photo_deletePhoto>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tech-reviews/photos/${encodeURIComponent(params.photoId)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_techReview_delete_photo_deletePhoto>
        }

        /**
         * Retrieves a complete tech review with all related data
         */
        public async get(params: { productId: string }): Promise<ResponseType<typeof api_techReview_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tech-reviews/${encodeURIComponent(params.productId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_techReview_get_get>
        }

        public async importExcel(params: RequestType<typeof api_techReview_import_excel_importExcel>): Promise<ResponseType<typeof api_techReview_import_excel_importExcel>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tech-review/import-excel`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_techReview_import_excel_importExcel>
        }

        public async listComponentParts(params: { techReviewId: number }): Promise<ResponseType<typeof api_techReview_list_component_parts_listComponentParts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tech-reviews/${encodeURIComponent(params.techReviewId)}/component-parts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_techReview_list_component_parts_listComponentParts>
        }

        /**
         * Updates a component's details
         */
        public async updateComponent(params: RequestType<typeof api_techReview_update_component_updateComponent>): Promise<void> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                assemblyNotes:  params.assemblyNotes,
                color:          params.color,
                finish:         params.finish,
                grainDirection: params.grainDirection,
                material:       params.material,
                nodeId:         params.nodeId,
                photoUrl:       params.photoUrl,
                technicalNotes: params.technicalNotes,
            }

            await this.baseClient.callTypedAPI(`/tech-reviews/components/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
        }

        public async updateComponentPart(params: RequestType<typeof api_techReview_update_component_part_updateComponentPart>): Promise<ResponseType<typeof api_techReview_update_component_part_updateComponentPart>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                assemblyTechnology:       params.assemblyTechnology,
                drawingCode:              params.drawingCode,
                finish:                   params.finish,
                hadErrors:                params.hadErrors,
                hasDone:                  params.hasDone,
                hasNode:                  params.hasNode,
                linkedErrorIds:           params.linkedErrorIds,
                material:                 params.material,
                notes:                    params.notes,
                photoUrl:                 params.photoUrl,
                selectedNodeId:           params.selectedNodeId,
                technologicalDescription: params.technologicalDescription,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tech-reviews/component-parts/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_techReview_update_component_part_updateComponentPart>
        }

        public async uploadComponentPartPhoto(params: RequestType<typeof api_techReview_upload_component_part_photo_uploadComponentPartPhoto>): Promise<ResponseType<typeof api_techReview_upload_component_part_photo_uploadComponentPartPhoto>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                contentType: params.contentType,
                fileData:    params.fileData,
                filename:    params.filename,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tech-reviews/component-parts/${encodeURIComponent(params.partId)}/upload-photo`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_techReview_upload_component_part_photo_uploadComponentPartPhoto>
        }

        public async uploadPhoto(params: RequestType<typeof api_techReview_upload_photo_uploadPhoto>): Promise<ResponseType<typeof api_techReview_upload_photo_uploadPhoto>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tech-review/upload-photo`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_techReview_upload_photo_uploadPhoto>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.50.6)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
